// index.ts (Eric)
include ChessBoard

print("Chess program started.")
const x = 8;// set up board
const y = 8;
let board: ChessBoard = {x,y}; // data struc that holds on piece objects
board.createBoard(); // creates blank board
let moveGood: boolean = 1; // sential, if check move makes a vaild move return 1; otherwise the player no longer wishes to play so return 0 and end loop and code
// game loop
do{
    print ("Player" + (chessBoard.player + 1) + "turn. enter move")
    moveGood = board.checkMove(); // function that keeps asking player for their turn
    if(moveGood){ //1 = good move / 0 = players quit game
        chessBoard.player = !chessBoard.player; // switch players
    }
    else{
        print("thanks for playing! Ending program.")
    }

}while(moveGood) // 1 = move made / 0 = players wish to stop program

//////////////////////////////////////////////////////////////////////////////
// board.ts (Eric)
include (all chess pieces)
type ChessBoard(x,y) = {
    //attributes
    const x:int = x; // board width
    const y:int = y; // board height
    let gamePieces: pieces = [size x by y]; // 2D array of every chess square
    let playerMove: bool = 0; // 0 = white's turn / 1 = black's turn

    //methods
    checkMove(); // cin move vaildation loop that returns 1 if move maded is vaild, returns 0 if players wish to quit. Calls makeMove()
    makeMove(x,y,newX,newY); // once move is identified to be okey. change the board to refelct that move. Calls printBoard()
    createBoard(); // makes empty board with pieces in right place. Changes turn to white. Calls printBoard()
    printBoard(); // prints board to the screen / may have to be private
}

// board functions
// cin move vaildation loop that returns 1 if move maded is vaild, returns 0 if players wish to quit. Calls makeMove()
function checkMove(): bool{
    let tempBool:bool = 0; // player made vaild move (1) or wants to quit (0)
    let flag:bool = 1; // repeats while loop until inupt from user is vaild; 1 = not vaild; 0 = vaild and move on
    do{
        // TODO check if move vaild
        // expected to call piece's move vaild button with gamePieces array
    }while(flag);
    if(tempBool){
        makeMove(sdfsaf);
    }
    return tempBool;
}

// once move is identified to be okey. change the board to refelct that move. Calls printBoard()
function makeMove(x,y,newX,newY): void{
    // move piece their
    // delete dead piece
    // delete position where the piece was
    printBoard();
}

// makes empty board with pieces in right place. Changes turn to white. Calls printBoard()
function createBoard(): void{
    // TODO after pieces are added maybe
}

// prints board to the screen / may have to be private
function printBoard(): void{
    for(i = 0; i <= x; i++){
        for(j = 0; j <= y; j++){
            // TODO
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
//(Coordinates) Point2D{ //for use in piece.ts to store both parts of a coordinate in one array spot.
  private x: number;
  private y: number;

  setPosition(x: number, y: number){
    this.x = x;
    this.y = y;
  }

  printPos(){
    console.log(`(${this.x}, ${this.y})`)
  }
}


//////////////////////////////////////////////////////////////////////////////
// (base class) piece.ts (Hayden)
include Point2D;
class pieceBase{
  private pieceName: string = "";
  private pieceColor: string = ""; //decided by players number in determinePieceColor(). if 0{ "White"}, if 1 {"Black" }. Ill make a setPieceColor( color: string ) function in this class but decide should be in board creation.
  private possibleMoves: Array<Point2D>;
  private pieceSprite; //Not sure how well do this on the web portion yet. For now I say we represent it with two letters. One for color and one for which piece it is. EX: a white bishop will be "WB" on the board. Black knight "BK"
  private heirarchy( place: number) //determines whether or not a piece can take another. if (piece1.heirarchy < piece2.herarchy) then invalidate the move.
  private startPosition: Point2D;

  //accessors and mutators for private data

  //pieces deconstruct automatically when they fall out of scope. We can handle piece deletion by overriding its spot on the board.


}

/////////////////////////////////////////////////////////////////////////////
//derived classes hould be simple. They really only need to hold special rules that are bespoke to a piece. EX: Kings having a deletion win condition and castleing. Other than that I think they only need to set the name of the piece and where it starts on the board.
// (derivied class) pawn.ts


// (derived class) king.ts
class king{
  this.setName( "King" )
  setPossibleMoves()
  setHeirarchy()
  setPieceSprite( "`${this.pieceColor}K`)
  setStartPosition (position: Point2D)
}
